"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/api.ts":
/*!*****************************!*\
  !*** ./src/services/api.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commentOnIssue: function() { return /* binding */ commentOnIssue; },\n/* harmony export */   createIssue: function() { return /* binding */ createIssue; },\n/* harmony export */   fetchRegionStats: function() { return /* binding */ fetchRegionStats; },\n/* harmony export */   getAllRegions: function() { return /* binding */ getAllRegions; },\n/* harmony export */   getDashboardStatistics: function() { return /* binding */ getDashboardStatistics; },\n/* harmony export */   getIssueById: function() { return /* binding */ getIssueById; },\n/* harmony export */   getIssues: function() { return /* binding */ getIssues; },\n/* harmony export */   getRegionById: function() { return /* binding */ getRegionById; },\n/* harmony export */   getRegionIssues: function() { return /* binding */ getRegionIssues; },\n/* harmony export */   getRegionStatistics: function() { return /* binding */ getRegionStatistics; },\n/* harmony export */   getTackledIssues: function() { return /* binding */ getTackledIssues; },\n/* harmony export */   getTrendingIssues: function() { return /* binding */ getTrendingIssues; },\n/* harmony export */   getTrendingUsers: function() { return /* binding */ getTrendingUsers; },\n/* harmony export */   getUserIssues: function() { return /* binding */ getUserIssues; },\n/* harmony export */   getUserProfile: function() { return /* binding */ getUserProfile; },\n/* harmony export */   loginUser: function() { return /* binding */ loginUser; },\n/* harmony export */   registerUser: function() { return /* binding */ registerUser; },\n/* harmony export */   subscribeToIssue: function() { return /* binding */ subscribeToIssue; },\n/* harmony export */   updateIssue: function() { return /* binding */ updateIssue; },\n/* harmony export */   updateUserProfile: function() { return /* binding */ updateUserProfile; },\n/* harmony export */   uploadProfilePicture: function() { return /* binding */ uploadProfilePicture; },\n/* harmony export */   voteOnIssue: function() { return /* binding */ voteOnIssue; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _types_issue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/issue */ \"./src/types/issue.ts\");\n\n\n// Create axios instance with base URL\nconst api = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: \"http://localhost:5000/api\" || 0,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\n// Add authorization token to requests\napi.interceptors.request.use((config)=>{\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n        config.headers.Authorization = \"Bearer \".concat(token);\n    }\n    return config;\n});\n// Authentication services\nconst registerUser = async (userData)=>{\n    const response = await api.post(\"/auth/register\", userData);\n    return response.data;\n};\nconst loginUser = async (credentials)=>{\n    const response = await api.post(\"/auth/login\", credentials);\n    return response.data;\n};\n// User services\nconst getUserProfile = async (userId)=>{\n    const response = await api.get(\"/users/\".concat(userId));\n    return response.data;\n};\nconst updateUserProfile = async (userData)=>{\n    const response = await api.put(\"/users/profile\", userData);\n    return response.data;\n};\nconst uploadProfilePicture = async (file)=>{\n    const formData = new FormData();\n    formData.append(\"profilePicture\", file);\n    const response = await api.post(\"/users/profile-picture\", formData, {\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        }\n    });\n    return response.data;\n};\nconst getTrendingUsers = async ()=>{\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get('/users/trending');\n    // return response.data;\n    return {\n        users: [\n            {\n                id: \"1\",\n                firstName: \"Alisher\",\n                lastName: \"Usmanov\",\n                profilePictureUrl: null,\n                trustScore: 85,\n                badges: [\n                    \"Community Hero\",\n                    \"Active Voter\"\n                ],\n                activityScore: 90,\n                recentActivity: {\n                    issuesCreated: 5,\n                    commentsPosted: 12,\n                    voteCount: 32\n                }\n            },\n            {\n                id: \"2\",\n                firstName: \"Dilnoza\",\n                lastName: \"Karimova\",\n                profilePictureUrl: null,\n                trustScore: 78,\n                badges: [\n                    \"Regional Advocate\"\n                ],\n                activityScore: 75,\n                recentActivity: {\n                    issuesCreated: 3,\n                    commentsPosted: 8,\n                    voteCount: 21\n                }\n            },\n            {\n                id: \"3\",\n                firstName: \"Bobur\",\n                lastName: \"Alimov\",\n                profilePictureUrl: null,\n                trustScore: 92,\n                badges: [\n                    \"Issue Solver\",\n                    \"Verified Resident\"\n                ],\n                activityScore: 88,\n                recentActivity: {\n                    issuesCreated: 7,\n                    commentsPosted: 15,\n                    voteCount: 40\n                }\n            }\n        ]\n    };\n};\n// Issue services\nconst getIssues = async function() {\n    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const response = await api.get(\"/issues\", {\n        params: filters\n    });\n    return response.data;\n};\nconst getTrendingIssues = async ()=>{\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get('/issues/trending');\n    // return response.data;\n    return {\n        trendingIssues: [\n            {\n                id: \"1\",\n                title: \"Water supply interruption in Yunusabad district\",\n                description: \"Frequent water supply interruptions in Yunusabad district blocks 14-18. The problem has been ongoing for the past two weeks.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.PENDING,\n                createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n                updatedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n                author: {\n                    id: \"1\",\n                    firstName: \"Alisher\",\n                    lastName: \"Usmanov\",\n                    profilePictureUrl: null\n                },\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 24,\n                    \"Very Important\": 68,\n                    Urgent: 133,\n                    total: 225\n                },\n                comments: Array(12).fill({}),\n                subscribers: [\n                    \"1\",\n                    \"2\",\n                    \"3\"\n                ],\n                isEscalated: true,\n                mediaUrls: []\n            },\n            {\n                id: \"2\",\n                title: \"Road repair needed on Amir Temur street\",\n                description: \"Large potholes on Amir Temur street causing traffic jams and posing danger to vehicles.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.IN_PROGRESS,\n                createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n                updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n                author: {\n                    id: \"2\",\n                    firstName: \"Dilnoza\",\n                    lastName: \"Karimova\",\n                    profilePictureUrl: null\n                },\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 41,\n                    \"Very Important\": 87,\n                    Urgent: 56,\n                    total: 184\n                },\n                comments: Array(23).fill({}),\n                subscribers: [\n                    \"1\",\n                    \"3\",\n                    \"4\"\n                ],\n                isEscalated: false,\n                mediaUrls: []\n            },\n            {\n                id: \"3\",\n                title: \"Garbage collection issues in Chilanzar district\",\n                description: \"Garbage containers are overflowing and not being emptied regularly in Chilanzar district.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.PENDING,\n                createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n                updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n                author: {\n                    id: \"3\",\n                    firstName: \"Bobur\",\n                    lastName: \"Alimov\",\n                    profilePictureUrl: null\n                },\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 52,\n                    \"Very Important\": 78,\n                    Urgent: 41,\n                    total: 171\n                },\n                comments: Array(8).fill({}),\n                subscribers: [\n                    \"2\",\n                    \"5\",\n                    \"6\"\n                ],\n                isEscalated: false,\n                mediaUrls: []\n            }\n        ]\n    };\n};\nconst getTackledIssues = async ()=>{\n    const response = await api.get(\"/issues/tackled\");\n    return response.data;\n};\nconst getIssueById = async (issueId)=>{\n    const response = await api.get(\"/issues/\".concat(issueId));\n    return response.data;\n};\nconst createIssue = async (issueData)=>{\n    const response = await api.post(\"/issues\", issueData);\n    return response.data;\n};\nconst updateIssue = async (issueId, issueData)=>{\n    const response = await api.put(\"/issues/\".concat(issueId), issueData);\n    return response.data;\n};\nconst voteOnIssue = async (issueId, priority)=>{\n    const response = await api.post(\"/issues/\".concat(issueId, \"/vote\"), {\n        priority\n    });\n    return response.data;\n};\nconst subscribeToIssue = async (issueId)=>{\n    const response = await api.post(\"/issues/\".concat(issueId, \"/subscribe\"));\n    return response.data;\n};\nconst commentOnIssue = async (issueId, content)=>{\n    const response = await api.post(\"/issues/\".concat(issueId, \"/comment\"), {\n        content\n    });\n    return response.data;\n};\nconst getUserIssues = async function(userId) {\n    let filters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const response = await api.get(\"/users/\".concat(userId, \"/issues\"), {\n        params: filters\n    });\n    return response.data;\n};\n// Region services\nconst getAllRegions = async ()=>{\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get('/regions');\n    // return response.data;\n    return {\n        regions: [\n            {\n                id: \"tashkent\",\n                code: \"tashkent\",\n                name: \"Tashkent\",\n                description: \"The capital city of Uzbekistan\",\n                population: 2500000,\n                coordinates: {\n                    latitude: 41.2995,\n                    longitude: 69.2401\n                },\n                imageUrl: null\n            },\n            {\n                id: \"samarkand\",\n                code: \"samarkand\",\n                name: \"Samarkand\",\n                description: \"Historic city and a UNESCO World Heritage Site\",\n                population: 500000,\n                coordinates: {\n                    latitude: 39.6542,\n                    longitude: 66.9597\n                },\n                imageUrl: null\n            },\n            {\n                id: \"bukhara\",\n                code: \"bukhara\",\n                name: \"Bukhara\",\n                description: \"Ancient city with well-preserved historical monuments\",\n                population: 280000,\n                coordinates: {\n                    latitude: 39.7747,\n                    longitude: 64.4286\n                },\n                imageUrl: null\n            }\n        ]\n    };\n};\nconst getRegionById = async (regionId)=>{\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get(`/regions/${regionId}`);\n    // return response.data;\n    return {\n        region: {\n            id: regionId,\n            name: regionId.charAt(0).toUpperCase() + regionId.slice(1),\n            code: regionId,\n            description: \"Region description would go here\",\n            population: 1000000,\n            coordinates: {\n                latitude: 41.2995,\n                longitude: 69.2401\n            },\n            imageUrl: null,\n            issueStatistics: {\n                total: 245,\n                pending: 87,\n                inProgress: 98,\n                resolved: 60,\n                resolutionRate: 24.5\n            },\n            officialRepresentatives: [\n                {\n                    id: \"rep1\",\n                    name: \"Aziz Kholmatov\",\n                    position: \"Regional Manager\",\n                    department: \"Public Works\",\n                    profilePictureUrl: null\n                }\n            ]\n        }\n    };\n};\nconst getRegionIssues = async function(regionId) {\n    let filters = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const response = await api.get(\"/regions/\".concat(regionId, \"/issues\"), {\n        params: filters\n    });\n    return response.data;\n};\nconst getRegionStatistics = async function(regionId) {\n    let params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get(`/regions/${regionId}/statistics`, { params });\n    // return response.data;\n    return {\n        period: params.period || 30,\n        dailyStats: Array.from({\n            length: 30\n        }, (_, i)=>{\n            const date = new Date();\n            date.setDate(date.getDate() - (29 - i));\n            return {\n                date: date.toISOString().split(\"T\")[0],\n                Pending: Math.floor(Math.random() * 10) + 5,\n                \"In Progress\": Math.floor(Math.random() * 15) + 5,\n                Resolved: Math.floor(Math.random() * 8) + 1,\n                total: Math.floor(Math.random() * 20) + 15\n            };\n        }),\n        overallStats: {\n            totalIssues: 245,\n            pendingIssues: 87,\n            inProgressIssues: 98,\n            resolvedIssues: 60,\n            resolutionRate: 24.5,\n            averageResolutionTime: 12.3\n        }\n    };\n};\n// Dashboard services\nconst getDashboardStatistics = async function() {\n    let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    // For development, return mock data\n    // In production, uncomment the API call\n    // const response = await api.get('/dashboard/statistics', { params });\n    // return response.data;\n    return {\n        overallStats: {\n            totalIssues: 3245,\n            pendingIssues: 987,\n            inProgressIssues: 1158,\n            resolvedIssues: 1100,\n            resolutionRate: 33.9,\n            activeUsers: 14587,\n            averageResolutionTime: 14.2\n        },\n        dailyStats: Array.from({\n            length: 30\n        }, (_, i)=>{\n            const date = new Date();\n            date.setDate(date.getDate() - (29 - i));\n            return {\n                date: date.toISOString().split(\"T\")[0],\n                Pending: Math.floor(Math.random() * 20) + 10,\n                \"In Progress\": Math.floor(Math.random() * 30) + 15,\n                Resolved: Math.floor(Math.random() * 15) + 5,\n                total: Math.floor(Math.random() * 40) + 30\n            };\n        }),\n        regionalStats: [\n            {\n                id: \"tashkent\",\n                name: \"Tashkent\",\n                totalIssues: 842,\n                pendingIssues: 246,\n                inProgressIssues: 375,\n                resolvedIssues: 221,\n                resolutionRate: 26.2\n            },\n            {\n                id: \"samarkand\",\n                name: \"Samarkand\",\n                totalIssues: 523,\n                pendingIssues: 187,\n                inProgressIssues: 205,\n                resolvedIssues: 131,\n                resolutionRate: 25.0\n            },\n            {\n                id: \"bukhara\",\n                name: \"Bukhara\",\n                totalIssues: 398,\n                pendingIssues: 112,\n                inProgressIssues: 146,\n                resolvedIssues: 140,\n                resolutionRate: 35.2\n            },\n            {\n                id: \"andijan\",\n                name: \"Andijan\",\n                totalIssues: 467,\n                pendingIssues: 154,\n                inProgressIssues: 196,\n                resolvedIssues: 117,\n                resolutionRate: 25.1\n            },\n            {\n                id: \"fergana\",\n                name: \"Fergana\",\n                totalIssues: 512,\n                pendingIssues: 164,\n                inProgressIssues: 203,\n                resolvedIssues: 145,\n                resolutionRate: 28.3\n            }\n        ],\n        trendingIssues: [\n            {\n                id: \"1\",\n                title: \"Water supply interruption in Yunusabad district\",\n                description: \"Frequent water supply interruptions in Yunusabad district blocks 14-18. The problem has been ongoing for the past two weeks.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.PENDING,\n                createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 24,\n                    \"Very Important\": 68,\n                    Urgent: 133,\n                    total: 225\n                },\n                comments: Array(12).fill({}),\n                isEscalated: true\n            },\n            {\n                id: \"2\",\n                title: \"Road repair needed on Amir Temur street\",\n                description: \"Large potholes on Amir Temur street causing traffic jams and posing danger to vehicles.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.IN_PROGRESS,\n                createdAt: new Date(Date.now() - 8 * 24 * 60 * 60 * 1000).toISOString(),\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 41,\n                    \"Very Important\": 87,\n                    Urgent: 56,\n                    total: 184\n                },\n                comments: Array(23).fill({}),\n                isEscalated: false\n            },\n            {\n                id: \"3\",\n                title: \"Garbage collection issues in Chilanzar district\",\n                description: \"Garbage containers are overflowing and not being emptied regularly in Chilanzar district.\",\n                status: _types_issue__WEBPACK_IMPORTED_MODULE_0__.IssueStatus.PENDING,\n                createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n                location: {\n                    regionId: \"tashkent\",\n                    regionName: \"Tashkent\",\n                    isNationwide: false\n                },\n                votes: {\n                    Important: 52,\n                    \"Very Important\": 78,\n                    Urgent: 41,\n                    total: 171\n                },\n                comments: Array(8).fill({}),\n                isEscalated: false\n            }\n        ],\n        recentActivity: [\n            {\n                id: \"act1\",\n                type: \"issue_created\",\n                issueId: \"1\",\n                issueTitle: \"Water supply interruption in Yunusabad district\",\n                timestamp: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString()\n            },\n            {\n                id: \"act2\",\n                type: \"issue_commented\",\n                issueId: \"2\",\n                issueTitle: \"Road repair needed on Amir Temur street\",\n                timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n                content: \"I noticed that repair work has started today. Thank you for addressing this issue!\"\n            },\n            {\n                id: \"act3\",\n                type: \"issue_voted\",\n                issueId: \"3\",\n                issueTitle: \"Garbage collection issues in Chilanzar district\",\n                timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()\n            },\n            {\n                id: \"act4\",\n                type: \"issue_subscribed\",\n                issueId: \"1\",\n                issueTitle: \"Water supply interruption in Yunusabad district\",\n                timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString()\n            }\n        ]\n    };\n};\nconst fetchRegionStats = async ()=>{\n    // TODO: Replace with actual API call\n    // This is mock data for development\n    return [\n        {\n            id: \"tashkent\",\n            name: \"Tashkent\",\n            issueCount: 450,\n            resolvedCount: 380,\n            activeIssues: 70,\n            population: 2500000\n        },\n        {\n            id: \"andijan\",\n            name: \"Andijan\",\n            issueCount: 320,\n            resolvedCount: 250,\n            activeIssues: 70,\n            population: 1800000\n        },\n        {\n            id: \"bukhara\",\n            name: \"Bukhara\",\n            issueCount: 280,\n            resolvedCount: 200,\n            activeIssues: 80,\n            population: 1500000\n        },\n        {\n            id: \"fergana\",\n            name: \"Fergana\",\n            issueCount: 350,\n            resolvedCount: 290,\n            activeIssues: 60,\n            population: 2000000\n        },\n        {\n            id: \"jizzakh\",\n            name: \"Jizzakh\",\n            issueCount: 180,\n            resolvedCount: 120,\n            activeIssues: 60,\n            population: 900000\n        },\n        {\n            id: \"karakalpakstan\",\n            name: \"Karakalpakstan\",\n            issueCount: 220,\n            resolvedCount: 150,\n            activeIssues: 70,\n            population: 1200000\n        },\n        {\n            id: \"namangan\",\n            name: \"Namangan\",\n            issueCount: 300,\n            resolvedCount: 240,\n            activeIssues: 60,\n            population: 1700000\n        },\n        {\n            id: \"navoi\",\n            name: \"Navoi\",\n            issueCount: 150,\n            resolvedCount: 100,\n            activeIssues: 50,\n            population: 800000\n        },\n        {\n            id: \"kashkadarya\",\n            name: \"Kashkadarya\",\n            issueCount: 260,\n            resolvedCount: 190,\n            activeIssues: 70,\n            population: 1400000\n        },\n        {\n            id: \"samarkand\",\n            name: \"Samarkand\",\n            issueCount: 380,\n            resolvedCount: 300,\n            activeIssues: 80,\n            population: 2200000\n        },\n        {\n            id: \"sirdaryo\",\n            name: \"Sirdaryo\",\n            issueCount: 140,\n            resolvedCount: 90,\n            activeIssues: 50,\n            population: 600000\n        },\n        {\n            id: \"surkhandarya\",\n            name: \"Surkhandarya\",\n            issueCount: 200,\n            resolvedCount: 140,\n            activeIssues: 60,\n            population: 1100000\n        },\n        {\n            id: \"tashkent-region\",\n            name: \"Tashkent Region\",\n            issueCount: 420,\n            resolvedCount: 340,\n            activeIssues: 80,\n            population: 2300000\n        }\n    ];\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api.ts\n"));

/***/ })

});